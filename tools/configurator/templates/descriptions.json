{
    "global-deployment-secrets": {
        "DEBUG_HELM": "Helm debugging enabled or disabled",
        
        "LOCATION": "Datacenter name. Examples, USW1, uswest1. No slash ('/') on this entry",
        "CONSUL_DC_LOCATION": "Datacenter location for Consul",

        "TENANT_SID": "Tenant short ID",
        "TENANT_UUID": "Tenant UUID v4 (long form tenant ID)",
        "SIP_DOMAIN": "Domain to be sent in SIP messaging",

        "DNS_SCOPE": "Should probably leave this default",
        "DOMAIN": "Default URL for ingresses to append, eg: https://gauth.<THIS_URL>",

        "CONSUL_ADDR": "FQDN for Consul",
        "CONSUL_BOOT_TOKEN": "Consul ACL token generated by Consul. consul_acl_bootstrap_token can be substituted for any other CONSUL ACL TOKEN variable if you don't want to generate one for each service, but this is not best practice",

        "REDIS_ADDR": "Service address for clustered redis (without port)",
        "REDIS_PASSWORD": "Password to access clustered redis",
        "REDIS_PORT": "Port to access clustered redis",

        "POSTGRES_ADDR": "Service address for 'default/standard' postgres (without port)",
        "POSTGRES_PORT": "Port for postgres",
        "POSTGRES_USER": "Username of postgres admin account",
        "POSTGRES_PASSWORD": "Password to access postgres",
        "POSTGRES_STD_ADDR": "Service address for 'default/standard' (without port)",
        "POSTGRES_GWS_ADDR": "Service address for 'gws' postgres (without port)",
        "POSTGRES_DGT_ADDR": "Service address for 'digital' postgres (without port)",
        "POSTGRES_RPTHIST_ADDR": "Service address for 'report history' postgres (without port)",
        "POSTGRES_RPTRT_ADDR": "Service address for 'realtime reporting' postgres (without port)",
        "POSTGRES_UCSX_ADDR": "Service address for 'UCSX' postgres (without port)",
        
        "MSSQL_ADDR": "URL for MSSQL - used for GVP-rs (Reporting Server)",
        "MSSQL_ADMIN_PASSWORD": "Password (previously created) for MSSQL",

        "KAFKA_ADDR": "Kafka (infra) URL",
        "KAFKA_PORT": "Port for use with KAFKA_ADDR",

        "ES_ADDR": "Common elasticsearch address",

        "INGRESS_CLASS": "Ingress class for external",
        "INGRESS_CLASS_INTERNAL": "Ingress class for internal",
        "CERT_ISSUER": "Certificate Issuer for the cluster. Installed as part of jetstacks cert-manager (installed as part of https://github.com/genesys/multicloud-platform ). Likely values: ca-cluster-issuer, or letsencrypt, or letsencrypt-prod .",

        "STORAGE_CLASS_RWO": "Storage class for RWO",
        "STORAGE_CLASS_RWO_PREMIUM": "Storage class premium disk",
        "STORAGE_CLASS_RWX": "Storage class for RWX",
        "STORAGE_CLASS_PROVISIONER": "Storage class provisioner",

        "GAUTH_NAMESPACE": "Namespace of GAuth service",
        "GWS_NAMESPACE": "Namespace of GWS gervice",
        "VOICE_NAMESPACE": "Namespace of Voice service",
        "IXN_NAMESPACE": "Namespace of IXN service",
        "PULSE_NAMESPACE": "Namespace of Pulse service",

        "gauth_admin_password_plain": "Gauth password for deployment of API/CORS",
        "gauth_admin_username": "Gauth username for deployment of API/CORS",

        "auth_client_gws": "Default API Client ID registered against GWS",
        "auth_client_gws_ws": "Default API Client ID registered against GWS",
        "auth_client_gws_prov": "Default API Client ID registered against GWS",
        "auth_client_tenant": "Default API Client ID registered against GWS",
        "auth_client_bds": "Default API Client ID registered against GWS",
        "auth_client_cxc": "Default API Client ID registered against GWS",
        "auth_client_designer": "Default API Client ID registered against GWS",
        "auth_client_ges": "Default API Client ID registered against GWS",
        "auth_client_gcxi": "Default API Client ID registered against GWS",
        "auth_client_pulse": "Default API Client ID registered against GWS",
        "auth_client_tlm": "Default API Client ID registered against GWS",
        "auth_client_ucsx": "Default API Client ID registered against GWS"
    },
    "bds": {
        "bds_gws_client_id": "API Client ID registered against GWS",
        "bds_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID",
        "bds_sftp_host": "Hostname or IP of the SFTP Server",
        "bds_sftp_path": "Path where the generated reports will be pulled from",
        "bds_sftp_user": "Username for the SFTP account",
        "bds_sftp_pass": "Password for the SFTP account"
    },
    "cxc": {
        "cxc_configserver_user_name": "Username for CXContact to login to ConfigServer",
        "cxc_configserver_user_password": "Password for CXContact to login to ConfigServer",
        "cxc_gws_client_id": "API Client ID registered against GWS",
        "cxc_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID",
        "cxc_prov_gwsauthpass": "For the Provisioning step, username to authenticate against GWS, like the ops user",
        "cxc_prov_gwsauthuser": "For the Provisioning step, password to authenticate against GWS, like the ops pass",
        "cxc_prov_tenant_pass": "Tenant DB password",
        "cxc_prov_tenant_user": "Tenant DB user",
        "cxc_redis_password": "Redis password (clustered infra redis)"
    },
    "designer": {
        "designer_gws_client_id": "API Client ID registered against GWS",
        "designer_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID"
    },
    "gauth": {
        "gauth_pg_dbname": "Postgres database name gauth will use",
        "gauth_pg_username": "Username to authenticate to the gauth database",
        "gauth_pg_password": "Password to authenticate to the gauth database",
        "gauth_admin_username": "Admin/ops password for interacting with the GWS API",
        "gauth_admin_password": "This is the encrypted admin/ops password, decodes to 'ops'. If you type something here, it will be bcrypted from your plaintext you type",
        "gauth_admin_password_plain": "Plaintext version of the gauth_admin_password, stored in deployment-secrets for reference",
        "gauth_gws_client_id": "API Client ID registered against GWS",
        "gauth_gws_client_secret": "This is the returned encrypted client secret for the 'external_api_client' client ID. Decodes to the word 'secret'. It is recommended you leave this as standard, and if you want to generate a new one, come back and replace it after the install (by manually editing the secrets).",
        "gauth_jks_keyPassword": "Password for the keystore certificate",
        "gauth_jks_keyStorePassword": "Password for the keystore",
        "gauth_jks_key": "Base64 formatted keystore created by gauth for use with jwt tokens (necessary for WebRTC deployments)"
    },
    "gcxi": {
        "gcxi_gws_client_id": "API Client ID registered against GWS",
        "gcxi_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID",
        "gcxi_db_host": "Database host where the GCXI DB will be created",
        "gcxi_gim_db_host": "Database host where the GIM DB is located",
        "gcxi_gim_db_name": "Database name of the GIM DB",
        "gcxi_gim_db_pass": "Database password for the GIM DB user",
        "gcxi_gim_db_user": "Database user to access the GIM DB",
        "gcxi_iwd_db_host": "Database host where the IWD DB is located",
        "gcxi_iwd_db_name": "Database name of the IWD DB",
        "gcxi_iwd_db_pass": "Database password for the IWD DB user",
        "gcxi_iwd_db_user": "Database user to access the IWD DB user"
    },
    "ges": {
        "ges_redis_password": "Redis password",
        "ges_redis_ors_host": "FQDN for the consul ORS service",
        "ges_gws_client_id": "API Client ID registered against GWS",
        "ges_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID",
        "ges_db_name": "Database name of the GES DB",
        "ges_db_user": "Database user to access the GES DB",
        "ges_db_password": "Database password for the GES DB user",
        "ges_devops_username": "The username that will be used to log in to the advanced DevOps UI",
        "ges_devops_password": "The password that will be used to log in to the advanced DevOps UI"
    },
    "gim": {
        "gim_pgdb_etl_name": "GIM Postgres ETL DB name",
        "gim_pgdb_etl_password": "GIM Postgres ETL DB password",
        "gim_pgdb_etl_user": "GIM Postgres ETL DB username"
    },
    "gsp": {
        "gsp_s3_bucket_host": "Hostname for GSP S3-compatible storage bucket",
        "gsp_s3_bucket_port": "Port for GSP S3-compatible storage host",
        "gsp_s3_bucket_name": "Bucketname for GSP S3-compatible storage",
        "gsp_s3_access_key": "Access key for GSP S3-compatible storage",
        "gsp_s3_secret_key": "Secret key for GSP S3-compatible storage",
        "gsp_azure_wasb_host": "Only mandatory for AKS (Azure-specific option), example: gspwestus2aks.blob.core.windows.net"
    },
    "gvp": {
        "gvp_cm_configserver_password": "GVP Configserver username",
        "gvp_cm_configserver_user": "GVP Configserver password",
        "gvp_cm_pg_db_name": "GVP Configserver postgres db name",
        "gvp_cm_pg_db_password": "GVP Configserver postgres password",
        "gvp_cm_pg_db_user": "GVP Configserver postgres user",
        "gvp_consul_token": "GVP Consul ACL token (can be the same as the Consul bootstrap token in a lab)",
        "gvp_pg_db_server": "Postgres DB Server for GVP Configserver",
        "gvp_rs_mssql_admin_password": "Admin password for MSSQL (will be created)",
        "gvp_mssql_db_server": "MS SQL Server for GVP RS (Reporting Server)",
        "gvp_rs_mssql_db_name": "MS SQL DB name for GVP RS",
        "gvp_rs_mssql_db_password": "MS SQL password for GVP RS user",
        "gvp_rs_mssql_db_user": "MS SQL username for GVP RS user",
        "gvp_rs_mssql_reader_password": "Password for 'mssqlreader' account (hardcoded username). If not defined defaults to the same as the admin password."
    },
    "gws": {
        "gws_app_provisioning": "The returned base64 encoded encrypted client secret from the API client. The plaintext value entered here should itself be base64-decodable",
        "gws_app_workspace": "The returned base64 encoded encrypted client secret from the API client. The plaintext value entered here should itself be base64-decodable",
        "gws_as_pg_pass": "Agent Setup provisioning postgres password",
        "gws_as_pg_user": "Agent Setup provisioning postgres username",
        "gws_pg_dbname_prov": "Agent Setup provisioning postgres database name",
        "gws_consul_token": "GWS Consul ACL token (can be the same as the Consul bootstrap token in a lab)",
        "gws_client_id": "API Client ID registered against GWS",
        "gws_client_secret": "The returned base64 encoded encrypted client secret from the API client. The plaintext value entered here should itself be base64-decodable",
        "workspc_client_id": "API Client ID registered against GWS for Workspace",
        "prov_client_id": "API Client ID registered against GWS for Agent Setup",
        "gws_ops_pass_encr": "This is the encrypted admin/ops password, decodes to 'ops'. If you type something here, it will be bcrypted from your plaintext you type",
        "gws_ops_user": "Admin/ops username",
        "gws_ops_pass": "Admin/ops plaintext password",
        "gws_pg_dbname": "Postgres DB name for GWS",
        "gws_pg_pass": "Postgres password for GWS DB user",
        "gws_pg_user": "Postgres username to access GWS DB",
        "gws_redis_password": "Redis password for GWS",
        "gws_set_clients": "If true, 'creates a bunch of GWS clients & secrets, for most Genesys services'"
    },
    "iwd": {
        "iwd_db_name": "Postgres DB name for IWD",
        "iwd_db_password": "Postgres DB password for IWD DB user",
        "iwd_db_user": "Postgres DB username for IWD DB access",
        "iwd_gws_client_id": "API Client ID registered against GWS",
        "iwd_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID",
        "iwd_nexus_api_key": "Should be assigned value from Nexus DB, nex_apikeys table, name 'iWD Cluster API Key'",
        "iwd_tenant_api_key": "Should be assigned value from Nexus DB, nex_apikeys table, name like 't100'",
        "iwd_tenant_api_key_iwddm": "Should be assigned a new generated UUID",
        "iwd_tenant_api_key_tenant": "Should be assigned a new generated UUID"
    },
    "iwddm": {
        "iwddm_nexus_api_key": "Should be assigned value from Nexus DB, nex_apikeys table, name 'iWD Cluster API Key'.",
        "iwddm_db_user": "Postgres DB username for IWDDM",
        "iwddm_db_password": "Postgres DB password for IWDDM DB user",
        "iwddm_gim_db_addr": "Postgres DB address for GIM DB",
        "iwddm_gim_db_name": "Postgres DB name for GIM DB",
        "iwddm_gim_db_password": "Postgres DB password for GIM DB",
        "iwddm_gim_db_user": "Postgres DB username for GIM DB"
    },
    "iwdem": {
        "iwdem_nexus_api_key": "Should be assigned value from Nexus DB, nex_apikeys table, name 'iWD Cluster API Key'."
    },
    "ixn": {
        "ixn_db_name": "Postgres DB name for IXN",
        "ixn_node_db_name": "Postgres DB name for IXN node",
        "ixn_db_password": "Postgres password for IXN DB user",
        "ixn_db_user": "Postgres username for IXN DB access"
    },
    "nexus": {
        "nexus_db_password": "Postgres DB password for Nexus DB user",
        "nexus_db_user": "Postgres username for Nexus DB access",
        "nexus_gws_client_id": "API Client ID registered against GWS",
        "nexus_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID",
        "nexus_tenant_locations": "Location for Tenant, without the prepended slash",
        "nexus_tenant_adm_user": "Tenant Config Server admin username",
        "nexus_tenant_adm_password": "Tenant Config Server admin password"
    },
    "pulse": {
        "pulse_gws_client_id": "API Client ID registered against GWS",
        "pulse_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID",
        "pulse_db_name": "Postgres DB name for Pulse",
        "pulse_db_user": "Postgres username for Pulse DB",
        "pulse_db_password": "Postgres password for Pulse DB username",
        "pulse_redis_host": "Redis service name for pulse (same namespace, not clustered in infra), no port",
        "pulse_redis_key": "Password for local pulse redis",
        "pulse_redis_port": "Port for local pulse redis"
    },
    "tlm": {
        "tlm_gws_client_id": "API Client ID registered against GWS",
        "tlm_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID"
    },
    "ucsx": {
        "ucsx_gws_client_id": "API Client ID registered against GWS",
        "ucsx_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID",
        "ucsx_db_name": "Database name for ucsx",
        "ucsx_tenant_100_db_name": "Database name for ucsx for the t100 tenant",
        "ucsx_tenant_100_db_password": "Database password for ucsx for the t100 tenant",
        "ucsx_tenant_100_db_user": "Database username for ucsx for the t100 tenant"
    },
    "voice": {
        "voice_consul_token": "Voice Consul ACL token (can be the same as the Consul bootstrap token in a lab)",
        "voice_dns_ip": "IP address of KubeDNS or CoreDNS service (in kube-system namespace by default)",
        "voice_redis_ip": "Resolved from $REDIS_ADDR in the global-deployment-secrets (in the default namespace)",
        "voice_redis_port": "Taken from the global-deployment-secrets (in the default namespace)",
        "voice_redis_password": "Taken from the global-deployment-secrets (in the default namespace)",
        "tenant_gws_client_id": "API Client ID registered against GWS",
        "tenant_gws_client_secret": "Plaintext secret (not the returned encrypted secret) for use with the API Client ID",
        "tenant_pg_admin": "Postgres admin user for Tenant (so the init container can create the database)",
        "tenant_pg_admin_pass": "Postgres admin password for Tenant (so the init container can create the database)",
        "tenant_pg_db_server": "Postgres server for use with tenant",
        "tenant_t100_pg_db_name": "Tenant postgres database name (will be created by init container)",
        "tenant_t100_pg_db_password": "Tenant postgres username (will be created by init container)",
        "tenant_t100_pg_db_user": "Tenant postgres password (will be created by init container)"
    }
}